from sklearn.neighbors import KNeighborsClassifier
import pickle
model_table=       [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 2, 1], [1, 1, 1, 1, 2, 2],
[1, 1, 1, 1, 3, 1], [1, 1, 1, 1, 3, 2], [1, 1, 1, 2, 1, 1], [1, 1, 1, 2, 1, 2], [1, 1, 1, 2, 2, 1], 
[1, 1, 1, 2, 2, 2], [1, 1, 1, 2, 3, 1], [1, 1, 1, 2, 3, 2], [1, 1, 2, 1, 1, 1], [1, 1, 2, 1, 1, 2],
[1, 1, 2, 1, 2, 1], [1, 1, 2, 1, 2, 2], [1, 1, 2, 1, 3, 1], [1, 1, 2, 1, 3, 2], [1, 1, 2, 2, 1, 1],
[1, 1, 2, 2, 1, 2], [1, 1, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2], [1, 1, 2, 2, 3, 1], [1, 1, 2, 2, 3, 2],
[1, 2, 1, 1, 1, 1], [1, 2, 1, 1, 1, 2], [1, 2, 1, 1, 2, 1], [1, 2, 1, 1, 2, 2], [1, 2, 1, 1, 3, 1], 
[1, 2, 1, 1, 3, 2], [1, 2, 1, 2, 1, 1], [1, 2, 1, 2, 1, 2], [1, 2, 1, 2, 2, 1], [1, 2, 1, 2, 2, 2],
[1, 2, 1, 2, 3, 1], [1, 2, 1, 2, 3, 2], [1, 2, 2, 1, 1, 1], [1, 2, 2, 1, 1, 2], [1, 2, 2, 1, 2, 1],
[1, 2, 2, 1, 2, 2], [1, 2, 2, 1, 3, 1], [1, 2, 2, 1, 3, 2], [1, 2, 2, 2, 1, 1], [1, 2, 2, 2, 1, 2],
[1, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 2], [1, 2, 2, 2, 3, 1], [1, 2, 2, 2, 3, 2], [1, 3, 1, 1, 1, 1],
[1, 3, 1, 1, 1, 2], [1, 3, 1, 1, 2, 1], [1, 3, 1, 1, 2, 2], [1, 3, 1, 1, 3, 1], [1, 3, 1, 1, 3, 2],
[1, 3, 1, 2, 1, 1], [1, 3, 1, 2, 1, 2], [1, 3, 1, 2, 2, 1], [1, 3, 1, 2, 2, 2], [1, 3, 1, 2, 3, 1], 
[2, 1, 2, 1, 3, 2], [2, 1, 2, 2, 1, 1], [2, 1, 2, 2, 1, 2], [2, 1, 2, 2, 2, 1], [2, 1, 2, 2, 2, 2], 
[2, 1, 2, 2, 3, 1], [2, 1, 2, 2, 3, 2], [2, 2, 1, 1, 1, 1], [2, 2, 1, 1, 1, 2], [2, 2, 1, 1, 2, 1],
[2, 2, 1, 1, 2, 2], [2, 2, 1, 1, 3, 1], [2, 2, 1, 1, 3, 2], [2, 2, 1, 2, 1, 1], [2, 2, 1, 2, 1, 2],
[2, 2, 1, 2, 2, 1], [2, 2, 1, 2, 2, 2], [2, 2, 1, 2, 3, 1], [2, 2, 1, 2, 3, 2], [2, 2, 2, 1, 1, 1],
[2, 2, 2, 1, 1, 2], [2, 2, 2, 1, 2, 1], [2, 2, 2, 1, 2, 2], [2, 2, 2, 1, 3, 1], [2, 2, 2, 1, 3, 2],
[2, 2, 2, 2, 1, 1], [2, 2, 2, 2, 1, 2], [2, 2, 2, 2, 2, 1], [2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 3, 1],
[2, 2, 2, 2, 3, 2], [2, 3, 1, 1, 1, 1], [2, 3, 1, 1, 1, 2], [2, 3, 1, 1, 2, 1], [2, 3, 1, 1, 2, 2],
[2, 3, 1, 1, 3, 1], [2, 3, 1, 1, 3, 2], [2, 3, 1, 2, 1, 1], [2, 3, 1, 2, 1, 2], [2, 3, 1, 2, 2, 1],
[2, 3, 1, 2, 2, 2], [2, 3, 1, 2, 3, 1], [2, 3, 1, 2, 3, 2], [2, 3, 2, 1, 1, 1], [2, 3, 2, 1, 1, 2],
[2, 3, 2, 1, 2, 1], [2, 3, 2, 1, 2, 2], [2, 3, 2, 1, 3, 1], [2, 3, 2, 1, 3, 2], [2, 3, 2, 2, 1, 1],
[2, 3, 2, 2, 1, 2], [2, 3, 2, 2, 2, 1], [2, 3, 2, 2, 2, 2], [2, 3, 2, 2, 3, 1], [2, 3, 2, 2, 3, 2],
[3, 1, 1, 1, 1, 1], [3, 1, 1, 1, 1, 2], [3, 1, 1, 1, 2, 1], [3, 1, 1, 1, 2, 2], [3, 1, 1, 1, 3, 1],
[3, 2, 1, 2, 1, 1], [3, 2, 1, 2, 1, 2], [3, 2, 1, 2, 2, 1], [3, 2, 1, 2, 2, 2], [3, 2, 1, 2, 3, 1],
[3, 2, 1, 2, 3, 2], [3, 2, 2, 1, 1, 1], [3, 2, 2, 1, 1, 2], [3, 2, 2, 1, 2, 1], [3, 2, 2, 1, 2, 2], 
[3, 2, 2, 1, 3, 1], [3, 2, 2, 1, 3, 2], [3, 2, 2, 2, 1, 1], [3, 2, 2, 2, 1, 2], [3, 2, 2, 2, 2, 1], 
[3, 2, 2, 2, 2, 2], [3, 2, 2, 2, 3, 1], [3, 2, 2, 2, 3, 2], [3, 3, 1, 1, 1, 1], [3, 3, 1, 1, 1, 2], 
[3, 3, 1, 1, 2, 1], [3, 3, 1, 1, 2, 2], [3, 3, 1, 1, 3, 1], [3, 3, 1, 1, 3, 2], [3, 3, 1, 2, 1, 1], 
[3, 3, 1, 2, 1, 2], [3, 3, 1, 2, 2, 1], [3, 3, 1, 2, 2, 2], [3, 3, 1, 2, 3, 1], [3, 3, 1, 2, 3, 2], 
[3, 3, 2, 1, 1, 1], [3, 3, 2, 1, 1, 2], [3, 3, 2, 1, 2, 1], [3, 3, 2, 1, 2, 2], [3, 3, 2, 1, 3, 1], 
[3, 3, 2, 1, 3, 2], [3, 3, 2, 2, 1, 1], [3, 3, 2, 2, 1, 2], [3, 3, 2, 2, 2, 1], [3, 3, 2, 2, 2, 2], 
[3, 3, 2, 2, 3, 1], [3, 3, 2, 2, 3, 2]]
modell=[0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1,
 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 2, 0, 1, 2, 2, 3,
 4, 0, 1, 1, 2, 3, 4, 0, 1, 1, 2, 2, 3, 2, 1, 1, 2, 2, 3, 1, 2, 3,
 4, 5, 1, 0, 2, 3, 4, 2, 1, 0, 2, 3, 4, 0, 2, 3, 4, 1, 2, 3, 1, 0,
 2, 4, 0, 2, 1, 2, 3, 3, 3, 4, 4, 2, 2, 3, 2, 4, 4, 2, 2, 3, 3, 4,
 4, 2, 2, 1, 3, 4, 4, 0, 0, 1, 3, 3, 2, 2, 1, 2, 1, 2, 4, 1, 0, 2,
 0, 1, 1, 0, 2, 0, 1, 2, 0, 1, 2,0, 3, 2, 1, 2, 0, 1, 2, 1, 0, 4,
 4, 3, 4, 3, 3, 2, 4, 3, 0, 4]
"""print(len(modell))"""
"""A=["cesar","vignere","hill","RSA","DES"]
neigh = KNeighborsClassifier(n_neighbors=1)
neigh.fit(model_table,modell)
# save the model to disk
filename = 'model.sav'
pickle.dump(neigh, open(filename, 'wb'))
"""
"""
walid=['0', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1',
 '0', '1', '0', '0', '1', '1', '1', '1', '1', '1', '2', '2', '1', '1', '1', '1', '1', '1']
massi=['1', '2', '3', '4', '5', '1', '0', '2', '3', '4', '2', '1', '0', '2', '3', '4', '0',
 '2', '3', '4', '1', '2', '3', '1', '0', '2', '4', '0', '2', '1']

rachid=['0', '1', '0', '1', '1', '2', '0', '1', '2', '2', '3', '4', '0', '1',
 '1', '2', '3', '4', '0', '1', '1', '2', '2', '3', '2', '1', '1', '2', '2', '3']
warda_massi=['2', '1', '2', '1', '2', '4', '1', '0', '2', '0', '1', '1', '0', '2', '0', '1',
 '2', '0', '1', '2', '0', '3', '2', '1', '2', '0', '1', '2', '1', '0']
lynda=['2', '3', '3', '3', '4', '4', '2', '2', '3', '2', '4', '4', '2', '2',
 '3', '3', '4', '4', '2', '2', '1', '3', '4', '4', '0', '0', '1', '3', '3', '2']
massi__=['4', '4', '3', '4', '3', '3', '2', '4', '3', '0', '4']
for i in range(len(walid)):
	modell.append(int(walid[i]))
for i in range(len(rachid)):
	modell.append(int(rachid[i]))
for i in range(len(massi)):
	modell.append(int(massi[i]))
for i in range(len(lynda)):
	modell.append(int(lynda[i]))
for i in range(len(warda_massi)):
	modell.append(int(warda_massi[i]))
for i in range(len(massi__)):
	modell.append(int(massi__[i]))


"""


#walid
"""print(len(model_table))
for a in range(30):
	print(model_table[a])
	x=input("quel algo ")
	modell.append(x)"""
#rachid
"""for a in range(30,60):
	print(model_table[a])
	x=input("quel algo ")
	modell.append(x)"""
#massi
"""for a in range(60,90):
	print(model_table[a])
	x=input("quel algo ")
	modell.append(x)"""
#lynda
"""for a in range(90,120):
	print(model_table[a])
	x=input("quel algo ")
	modell.append(x)"""
#warda
"""for a in range(120,150):
	print(model_table[a])
	x=input("quel algo ")
	modell.append(x)"""
#
# quel est votre niveau en mathématique [faible ,moyen ,élevé ]
# quel est le degré de sensibilité de vos fichiers[bas sensibilité,moyen sensibilité,haute sensibilité]
# vous fichiers sont-ils destinées pour être utiliser :[local,externe]
# avez-vous des bases en cryptographie / faites-vous la différence entre la crypto symétrique et crypto assymétrique :oui / non
#  Quelle  degré de cryptage voulez-vous :[faible ,moyen ,élevé ]
# temps de cryptage : rapide (moins sécurisé)/ long

#0 cesar
#1 vignere
#2 hill
#3 rsa
#4 des
"""
print(modell)
print(len(modell))"""
"""for i in range(len(model_table)):
	if model_table[i]==[2, 2, 2, 1, 1, 1]:
		print(i)
		break"""
